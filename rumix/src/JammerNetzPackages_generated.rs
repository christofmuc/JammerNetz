// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum JammerNetzPNPStreamQualityInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JammerNetzPNPStreamQualityInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JammerNetzPNPStreamQualityInfo<'a> {
  type Inner = JammerNetzPNPStreamQualityInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JammerNetzPNPStreamQualityInfo<'a> {
  pub const VT_TOOLATEORDUPLICATE: flatbuffers::VOffsetT = 4;
  pub const VT_DROPPEDPACKETCOUNTER: flatbuffers::VOffsetT = 6;
  pub const VT_OUTOFORDERPACKETCOUNTER: flatbuffers::VOffsetT = 8;
  pub const VT_DUPLICATEPACKETCOUNTER: flatbuffers::VOffsetT = 10;
  pub const VT_DROPSHEALED: flatbuffers::VOffsetT = 12;
  pub const VT_PACKAGESPUSHED: flatbuffers::VOffsetT = 14;
  pub const VT_PACKAGESPOPPED: flatbuffers::VOffsetT = 16;
  pub const VT_MAXLENGTHOFGAP: flatbuffers::VOffsetT = 18;
  pub const VT_MAXWRONGORDERSPAN: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JammerNetzPNPStreamQualityInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JammerNetzPNPStreamQualityInfoArgs
  ) -> flatbuffers::WIPOffset<JammerNetzPNPStreamQualityInfo<'bldr>> {
    let mut builder = JammerNetzPNPStreamQualityInfoBuilder::new(_fbb);
    builder.add_maxWrongOrderSpan(args.maxWrongOrderSpan);
    builder.add_maxLengthOfGap(args.maxLengthOfGap);
    builder.add_packagesPopped(args.packagesPopped);
    builder.add_packagesPushed(args.packagesPushed);
    builder.add_dropsHealed(args.dropsHealed);
    builder.add_duplicatePacketCounter(args.duplicatePacketCounter);
    builder.add_outOfOrderPacketCounter(args.outOfOrderPacketCounter);
    builder.add_droppedPacketCounter(args.droppedPacketCounter);
    builder.add_tooLateOrDuplicate(args.tooLateOrDuplicate);
    builder.finish()
  }


  #[inline]
  pub fn tooLateOrDuplicate(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(JammerNetzPNPStreamQualityInfo::VT_TOOLATEORDUPLICATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn droppedPacketCounter(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JammerNetzPNPStreamQualityInfo::VT_DROPPEDPACKETCOUNTER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn outOfOrderPacketCounter(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JammerNetzPNPStreamQualityInfo::VT_OUTOFORDERPACKETCOUNTER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn duplicatePacketCounter(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JammerNetzPNPStreamQualityInfo::VT_DUPLICATEPACKETCOUNTER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dropsHealed(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(JammerNetzPNPStreamQualityInfo::VT_DROPSHEALED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn packagesPushed(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(JammerNetzPNPStreamQualityInfo::VT_PACKAGESPUSHED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn packagesPopped(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(JammerNetzPNPStreamQualityInfo::VT_PACKAGESPOPPED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn maxLengthOfGap(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(JammerNetzPNPStreamQualityInfo::VT_MAXLENGTHOFGAP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn maxWrongOrderSpan(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(JammerNetzPNPStreamQualityInfo::VT_MAXWRONGORDERSPAN, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for JammerNetzPNPStreamQualityInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("tooLateOrDuplicate", Self::VT_TOOLATEORDUPLICATE, false)?
     .visit_field::<i64>("droppedPacketCounter", Self::VT_DROPPEDPACKETCOUNTER, false)?
     .visit_field::<i64>("outOfOrderPacketCounter", Self::VT_OUTOFORDERPACKETCOUNTER, false)?
     .visit_field::<i64>("duplicatePacketCounter", Self::VT_DUPLICATEPACKETCOUNTER, false)?
     .visit_field::<u64>("dropsHealed", Self::VT_DROPSHEALED, false)?
     .visit_field::<u64>("packagesPushed", Self::VT_PACKAGESPUSHED, false)?
     .visit_field::<u64>("packagesPopped", Self::VT_PACKAGESPOPPED, false)?
     .visit_field::<u64>("maxLengthOfGap", Self::VT_MAXLENGTHOFGAP, false)?
     .visit_field::<u64>("maxWrongOrderSpan", Self::VT_MAXWRONGORDERSPAN, false)?
     .finish();
    Ok(())
  }
}
pub struct JammerNetzPNPStreamQualityInfoArgs {
    pub tooLateOrDuplicate: u64,
    pub droppedPacketCounter: i64,
    pub outOfOrderPacketCounter: i64,
    pub duplicatePacketCounter: i64,
    pub dropsHealed: u64,
    pub packagesPushed: u64,
    pub packagesPopped: u64,
    pub maxLengthOfGap: u64,
    pub maxWrongOrderSpan: u64,
}
impl<'a> Default for JammerNetzPNPStreamQualityInfoArgs {
  #[inline]
  fn default() -> Self {
    JammerNetzPNPStreamQualityInfoArgs {
      tooLateOrDuplicate: 0,
      droppedPacketCounter: 0,
      outOfOrderPacketCounter: 0,
      duplicatePacketCounter: 0,
      dropsHealed: 0,
      packagesPushed: 0,
      packagesPopped: 0,
      maxLengthOfGap: 0,
      maxWrongOrderSpan: 0,
    }
  }
}

pub struct JammerNetzPNPStreamQualityInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JammerNetzPNPStreamQualityInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_tooLateOrDuplicate(&mut self, tooLateOrDuplicate: u64) {
    self.fbb_.push_slot::<u64>(JammerNetzPNPStreamQualityInfo::VT_TOOLATEORDUPLICATE, tooLateOrDuplicate, 0);
  }
  #[inline]
  pub fn add_droppedPacketCounter(&mut self, droppedPacketCounter: i64) {
    self.fbb_.push_slot::<i64>(JammerNetzPNPStreamQualityInfo::VT_DROPPEDPACKETCOUNTER, droppedPacketCounter, 0);
  }
  #[inline]
  pub fn add_outOfOrderPacketCounter(&mut self, outOfOrderPacketCounter: i64) {
    self.fbb_.push_slot::<i64>(JammerNetzPNPStreamQualityInfo::VT_OUTOFORDERPACKETCOUNTER, outOfOrderPacketCounter, 0);
  }
  #[inline]
  pub fn add_duplicatePacketCounter(&mut self, duplicatePacketCounter: i64) {
    self.fbb_.push_slot::<i64>(JammerNetzPNPStreamQualityInfo::VT_DUPLICATEPACKETCOUNTER, duplicatePacketCounter, 0);
  }
  #[inline]
  pub fn add_dropsHealed(&mut self, dropsHealed: u64) {
    self.fbb_.push_slot::<u64>(JammerNetzPNPStreamQualityInfo::VT_DROPSHEALED, dropsHealed, 0);
  }
  #[inline]
  pub fn add_packagesPushed(&mut self, packagesPushed: u64) {
    self.fbb_.push_slot::<u64>(JammerNetzPNPStreamQualityInfo::VT_PACKAGESPUSHED, packagesPushed, 0);
  }
  #[inline]
  pub fn add_packagesPopped(&mut self, packagesPopped: u64) {
    self.fbb_.push_slot::<u64>(JammerNetzPNPStreamQualityInfo::VT_PACKAGESPOPPED, packagesPopped, 0);
  }
  #[inline]
  pub fn add_maxLengthOfGap(&mut self, maxLengthOfGap: u64) {
    self.fbb_.push_slot::<u64>(JammerNetzPNPStreamQualityInfo::VT_MAXLENGTHOFGAP, maxLengthOfGap, 0);
  }
  #[inline]
  pub fn add_maxWrongOrderSpan(&mut self, maxWrongOrderSpan: u64) {
    self.fbb_.push_slot::<u64>(JammerNetzPNPStreamQualityInfo::VT_MAXWRONGORDERSPAN, maxWrongOrderSpan, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JammerNetzPNPStreamQualityInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JammerNetzPNPStreamQualityInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JammerNetzPNPStreamQualityInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JammerNetzPNPStreamQualityInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JammerNetzPNPStreamQualityInfo");
      ds.field("tooLateOrDuplicate", &self.tooLateOrDuplicate());
      ds.field("droppedPacketCounter", &self.droppedPacketCounter());
      ds.field("outOfOrderPacketCounter", &self.outOfOrderPacketCounter());
      ds.field("duplicatePacketCounter", &self.duplicatePacketCounter());
      ds.field("dropsHealed", &self.dropsHealed());
      ds.field("packagesPushed", &self.packagesPushed());
      ds.field("packagesPopped", &self.packagesPopped());
      ds.field("maxLengthOfGap", &self.maxLengthOfGap());
      ds.field("maxWrongOrderSpan", &self.maxWrongOrderSpan());
      ds.finish()
  }
}
pub enum JammerNetzPNPClientInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JammerNetzPNPClientInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JammerNetzPNPClientInfo<'a> {
  type Inner = JammerNetzPNPClientInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JammerNetzPNPClientInfo<'a> {
  pub const VT_IPADDRESS: flatbuffers::VOffsetT = 4;
  pub const VT_ISIPV6: flatbuffers::VOffsetT = 6;
  pub const VT_PORTNUMBER: flatbuffers::VOffsetT = 8;
  pub const VT_QUALITYINFO: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JammerNetzPNPClientInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JammerNetzPNPClientInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<JammerNetzPNPClientInfo<'bldr>> {
    let mut builder = JammerNetzPNPClientInfoBuilder::new(_fbb);
    if let Some(x) = args.qualityInfo { builder.add_qualityInfo(x); }
    builder.add_portNumber(args.portNumber);
    if let Some(x) = args.ipAddress { builder.add_ipAddress(x); }
    builder.add_isIPV6(args.isIPV6);
    builder.finish()
  }


  #[inline]
  pub fn ipAddress(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(JammerNetzPNPClientInfo::VT_IPADDRESS, None)}
  }
  #[inline]
  pub fn isIPV6(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JammerNetzPNPClientInfo::VT_ISIPV6, Some(false)).unwrap()}
  }
  #[inline]
  pub fn portNumber(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JammerNetzPNPClientInfo::VT_PORTNUMBER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn qualityInfo(&self) -> Option<JammerNetzPNPStreamQualityInfo<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JammerNetzPNPStreamQualityInfo>>(JammerNetzPNPClientInfo::VT_QUALITYINFO, None)}
  }
}

impl flatbuffers::Verifiable for JammerNetzPNPClientInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("ipAddress", Self::VT_IPADDRESS, false)?
     .visit_field::<bool>("isIPV6", Self::VT_ISIPV6, false)?
     .visit_field::<i32>("portNumber", Self::VT_PORTNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JammerNetzPNPStreamQualityInfo>>("qualityInfo", Self::VT_QUALITYINFO, false)?
     .finish();
    Ok(())
  }
}
pub struct JammerNetzPNPClientInfoArgs<'a> {
    pub ipAddress: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub isIPV6: bool,
    pub portNumber: i32,
    pub qualityInfo: Option<flatbuffers::WIPOffset<JammerNetzPNPStreamQualityInfo<'a>>>,
}
impl<'a> Default for JammerNetzPNPClientInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    JammerNetzPNPClientInfoArgs {
      ipAddress: None,
      isIPV6: false,
      portNumber: 0,
      qualityInfo: None,
    }
  }
}

pub struct JammerNetzPNPClientInfoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JammerNetzPNPClientInfoBuilder<'a, 'b> {
  #[inline]
  pub fn add_ipAddress(&mut self, ipAddress: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPClientInfo::VT_IPADDRESS, ipAddress);
  }
  #[inline]
  pub fn add_isIPV6(&mut self, isIPV6: bool) {
    self.fbb_.push_slot::<bool>(JammerNetzPNPClientInfo::VT_ISIPV6, isIPV6, false);
  }
  #[inline]
  pub fn add_portNumber(&mut self, portNumber: i32) {
    self.fbb_.push_slot::<i32>(JammerNetzPNPClientInfo::VT_PORTNUMBER, portNumber, 0);
  }
  #[inline]
  pub fn add_qualityInfo(&mut self, qualityInfo: flatbuffers::WIPOffset<JammerNetzPNPStreamQualityInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JammerNetzPNPStreamQualityInfo>>(JammerNetzPNPClientInfo::VT_QUALITYINFO, qualityInfo);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JammerNetzPNPClientInfoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JammerNetzPNPClientInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JammerNetzPNPClientInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JammerNetzPNPClientInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JammerNetzPNPClientInfo");
      ds.field("ipAddress", &self.ipAddress());
      ds.field("isIPV6", &self.isIPV6());
      ds.field("portNumber", &self.portNumber());
      ds.field("qualityInfo", &self.qualityInfo());
      ds.finish()
  }
}
pub enum JammerNetzPNPClientInfoPackageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JammerNetzPNPClientInfoPackage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JammerNetzPNPClientInfoPackage<'a> {
  type Inner = JammerNetzPNPClientInfoPackage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JammerNetzPNPClientInfoPackage<'a> {
  pub const VT_CLIENTINFOS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JammerNetzPNPClientInfoPackage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JammerNetzPNPClientInfoPackageArgs<'args>
  ) -> flatbuffers::WIPOffset<JammerNetzPNPClientInfoPackage<'bldr>> {
    let mut builder = JammerNetzPNPClientInfoPackageBuilder::new(_fbb);
    if let Some(x) = args.clientInfos { builder.add_clientInfos(x); }
    builder.finish()
  }


  #[inline]
  pub fn clientInfos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPClientInfo<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPClientInfo>>>>(JammerNetzPNPClientInfoPackage::VT_CLIENTINFOS, None)}
  }
}

impl flatbuffers::Verifiable for JammerNetzPNPClientInfoPackage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JammerNetzPNPClientInfo>>>>("clientInfos", Self::VT_CLIENTINFOS, false)?
     .finish();
    Ok(())
  }
}
pub struct JammerNetzPNPClientInfoPackageArgs<'a> {
    pub clientInfos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPClientInfo<'a>>>>>,
}
impl<'a> Default for JammerNetzPNPClientInfoPackageArgs<'a> {
  #[inline]
  fn default() -> Self {
    JammerNetzPNPClientInfoPackageArgs {
      clientInfos: None,
    }
  }
}

pub struct JammerNetzPNPClientInfoPackageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JammerNetzPNPClientInfoPackageBuilder<'a, 'b> {
  #[inline]
  pub fn add_clientInfos(&mut self, clientInfos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JammerNetzPNPClientInfo<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPClientInfoPackage::VT_CLIENTINFOS, clientInfos);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JammerNetzPNPClientInfoPackageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JammerNetzPNPClientInfoPackageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JammerNetzPNPClientInfoPackage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JammerNetzPNPClientInfoPackage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JammerNetzPNPClientInfoPackage");
      ds.field("clientInfos", &self.clientInfos());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `JammerNetzPNPClientInfoPackage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_jammer_netz_pnpclient_info_package_unchecked`.
pub fn root_as_jammer_netz_pnpclient_info_package(buf: &[u8]) -> Result<JammerNetzPNPClientInfoPackage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<JammerNetzPNPClientInfoPackage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `JammerNetzPNPClientInfoPackage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_jammer_netz_pnpclient_info_package_unchecked`.
pub fn size_prefixed_root_as_jammer_netz_pnpclient_info_package(buf: &[u8]) -> Result<JammerNetzPNPClientInfoPackage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<JammerNetzPNPClientInfoPackage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `JammerNetzPNPClientInfoPackage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_jammer_netz_pnpclient_info_package_unchecked`.
pub fn root_as_jammer_netz_pnpclient_info_package_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<JammerNetzPNPClientInfoPackage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<JammerNetzPNPClientInfoPackage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `JammerNetzPNPClientInfoPackage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_jammer_netz_pnpclient_info_package_unchecked`.
pub fn size_prefixed_root_as_jammer_netz_pnpclient_info_package_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<JammerNetzPNPClientInfoPackage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<JammerNetzPNPClientInfoPackage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a JammerNetzPNPClientInfoPackage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `JammerNetzPNPClientInfoPackage`.
pub unsafe fn root_as_jammer_netz_pnpclient_info_package_unchecked(buf: &[u8]) -> JammerNetzPNPClientInfoPackage {
  flatbuffers::root_unchecked::<JammerNetzPNPClientInfoPackage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed JammerNetzPNPClientInfoPackage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `JammerNetzPNPClientInfoPackage`.
pub unsafe fn size_prefixed_root_as_jammer_netz_pnpclient_info_package_unchecked(buf: &[u8]) -> JammerNetzPNPClientInfoPackage {
  flatbuffers::size_prefixed_root_unchecked::<JammerNetzPNPClientInfoPackage>(buf)
}
#[inline]
pub fn finish_jammer_netz_pnpclient_info_package_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<JammerNetzPNPClientInfoPackage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_jammer_netz_pnpclient_info_package_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<JammerNetzPNPClientInfoPackage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
