// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum JammerNetzPNPChannelSetupOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JammerNetzPNPChannelSetup<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JammerNetzPNPChannelSetup<'a> {
  type Inner = JammerNetzPNPChannelSetup<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JammerNetzPNPChannelSetup<'a> {
  pub const VT_TARGET: flatbuffers::VOffsetT = 4;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 6;
  pub const VT_MAG: flatbuffers::VOffsetT = 8;
  pub const VT_RMS: flatbuffers::VOffsetT = 10;
  pub const VT_PITCH: flatbuffers::VOffsetT = 12;
  pub const VT_NAME: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JammerNetzPNPChannelSetup { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JammerNetzPNPChannelSetupArgs<'args>
  ) -> flatbuffers::WIPOffset<JammerNetzPNPChannelSetup<'bldr>> {
    let mut builder = JammerNetzPNPChannelSetupBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_pitch(args.pitch);
    builder.add_rms(args.rms);
    builder.add_mag(args.mag);
    builder.add_volume(args.volume);
    builder.add_target(args.target);
    builder.finish()
  }


  #[inline]
  pub fn target(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(JammerNetzPNPChannelSetup::VT_TARGET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn volume(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(JammerNetzPNPChannelSetup::VT_VOLUME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn mag(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(JammerNetzPNPChannelSetup::VT_MAG, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn rms(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(JammerNetzPNPChannelSetup::VT_RMS, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn pitch(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(JammerNetzPNPChannelSetup::VT_PITCH, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JammerNetzPNPChannelSetup::VT_NAME, None)}
  }
}

impl flatbuffers::Verifiable for JammerNetzPNPChannelSetup<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("target", Self::VT_TARGET, false)?
     .visit_field::<f32>("volume", Self::VT_VOLUME, false)?
     .visit_field::<f32>("mag", Self::VT_MAG, false)?
     .visit_field::<f32>("rms", Self::VT_RMS, false)?
     .visit_field::<f32>("pitch", Self::VT_PITCH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .finish();
    Ok(())
  }
}
pub struct JammerNetzPNPChannelSetupArgs<'a> {
    pub target: u8,
    pub volume: f32,
    pub mag: f32,
    pub rms: f32,
    pub pitch: f32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for JammerNetzPNPChannelSetupArgs<'a> {
  #[inline]
  fn default() -> Self {
    JammerNetzPNPChannelSetupArgs {
      target: 0,
      volume: 0.0,
      mag: 0.0,
      rms: 0.0,
      pitch: 0.0,
      name: None,
    }
  }
}

pub struct JammerNetzPNPChannelSetupBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JammerNetzPNPChannelSetupBuilder<'a, 'b> {
  #[inline]
  pub fn add_target(&mut self, target: u8) {
    self.fbb_.push_slot::<u8>(JammerNetzPNPChannelSetup::VT_TARGET, target, 0);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: f32) {
    self.fbb_.push_slot::<f32>(JammerNetzPNPChannelSetup::VT_VOLUME, volume, 0.0);
  }
  #[inline]
  pub fn add_mag(&mut self, mag: f32) {
    self.fbb_.push_slot::<f32>(JammerNetzPNPChannelSetup::VT_MAG, mag, 0.0);
  }
  #[inline]
  pub fn add_rms(&mut self, rms: f32) {
    self.fbb_.push_slot::<f32>(JammerNetzPNPChannelSetup::VT_RMS, rms, 0.0);
  }
  #[inline]
  pub fn add_pitch(&mut self, pitch: f32) {
    self.fbb_.push_slot::<f32>(JammerNetzPNPChannelSetup::VT_PITCH, pitch, 0.0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPChannelSetup::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JammerNetzPNPChannelSetupBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JammerNetzPNPChannelSetupBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JammerNetzPNPChannelSetup<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JammerNetzPNPChannelSetup<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JammerNetzPNPChannelSetup");
      ds.field("target", &self.target());
      ds.field("volume", &self.volume());
      ds.field("mag", &self.mag());
      ds.field("rms", &self.rms());
      ds.field("pitch", &self.pitch());
      ds.field("name", &self.name());
      ds.finish()
  }
}
pub enum JammerNetzPNPAudioSamplesOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JammerNetzPNPAudioSamples<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JammerNetzPNPAudioSamples<'a> {
  type Inner = JammerNetzPNPAudioSamples<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JammerNetzPNPAudioSamples<'a> {
  pub const VT_AUDIOSAMPLES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JammerNetzPNPAudioSamples { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JammerNetzPNPAudioSamplesArgs<'args>
  ) -> flatbuffers::WIPOffset<JammerNetzPNPAudioSamples<'bldr>> {
    let mut builder = JammerNetzPNPAudioSamplesBuilder::new(_fbb);
    if let Some(x) = args.audioSamples { builder.add_audioSamples(x); }
    builder.finish()
  }


  #[inline]
  pub fn audioSamples(&self) -> Option<flatbuffers::Vector<'a, u16>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u16>>>(JammerNetzPNPAudioSamples::VT_AUDIOSAMPLES, None)}
  }
}

impl flatbuffers::Verifiable for JammerNetzPNPAudioSamples<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u16>>>("audioSamples", Self::VT_AUDIOSAMPLES, false)?
     .finish();
    Ok(())
  }
}
pub struct JammerNetzPNPAudioSamplesArgs<'a> {
    pub audioSamples: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u16>>>,
}
impl<'a> Default for JammerNetzPNPAudioSamplesArgs<'a> {
  #[inline]
  fn default() -> Self {
    JammerNetzPNPAudioSamplesArgs {
      audioSamples: None,
    }
  }
}

pub struct JammerNetzPNPAudioSamplesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JammerNetzPNPAudioSamplesBuilder<'a, 'b> {
  #[inline]
  pub fn add_audioSamples(&mut self, audioSamples: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u16>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPAudioSamples::VT_AUDIOSAMPLES, audioSamples);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JammerNetzPNPAudioSamplesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JammerNetzPNPAudioSamplesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JammerNetzPNPAudioSamples<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JammerNetzPNPAudioSamples<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JammerNetzPNPAudioSamples");
      ds.field("audioSamples", &self.audioSamples());
      ds.finish()
  }
}
pub enum JammerNetzPNPAudioBlockOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JammerNetzPNPAudioBlock<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JammerNetzPNPAudioBlock<'a> {
  type Inner = JammerNetzPNPAudioBlock<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JammerNetzPNPAudioBlock<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGECOUNTER: flatbuffers::VOffsetT = 6;
  pub const VT_NUMCHANNELS: flatbuffers::VOffsetT = 8;
  pub const VT_NUMBEROFSAMPLES: flatbuffers::VOffsetT = 10;
  pub const VT_SAMPLERATE: flatbuffers::VOffsetT = 12;
  pub const VT_CHANNELSETUP: flatbuffers::VOffsetT = 14;
  pub const VT_CHANNELS: flatbuffers::VOffsetT = 16;
  pub const VT_ALLCHANNELS: flatbuffers::VOffsetT = 18;
  pub const VT_WANTECHO: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JammerNetzPNPAudioBlock { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JammerNetzPNPAudioBlockArgs<'args>
  ) -> flatbuffers::WIPOffset<JammerNetzPNPAudioBlock<'bldr>> {
    let mut builder = JammerNetzPNPAudioBlockBuilder::new(_fbb);
    builder.add_messageCounter(args.messageCounter);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.allChannels { builder.add_allChannels(x); }
    if let Some(x) = args.channels { builder.add_channels(x); }
    if let Some(x) = args.channelSetup { builder.add_channelSetup(x); }
    builder.add_sampleRate(args.sampleRate);
    builder.add_numberOfSamples(args.numberOfSamples);
    builder.add_wantEcho(args.wantEcho);
    builder.add_numChannels(args.numChannels);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(JammerNetzPNPAudioBlock::VT_TIMESTAMP, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn messageCounter(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(JammerNetzPNPAudioBlock::VT_MESSAGECOUNTER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn numChannels(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(JammerNetzPNPAudioBlock::VT_NUMCHANNELS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn numberOfSamples(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(JammerNetzPNPAudioBlock::VT_NUMBEROFSAMPLES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn sampleRate(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(JammerNetzPNPAudioBlock::VT_SAMPLERATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn channelSetup(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup>>>>(JammerNetzPNPAudioBlock::VT_CHANNELSETUP, None)}
  }
  #[inline]
  pub fn channels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioSamples<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioSamples>>>>(JammerNetzPNPAudioBlock::VT_CHANNELS, None)}
  }
  #[inline]
  pub fn allChannels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup>>>>(JammerNetzPNPAudioBlock::VT_ALLCHANNELS, None)}
  }
  #[inline]
  pub fn wantEcho(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JammerNetzPNPAudioBlock::VT_WANTECHO, Some(true)).unwrap()}
  }
}

impl flatbuffers::Verifiable for JammerNetzPNPAudioBlock<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<u64>("messageCounter", Self::VT_MESSAGECOUNTER, false)?
     .visit_field::<u8>("numChannels", Self::VT_NUMCHANNELS, false)?
     .visit_field::<u16>("numberOfSamples", Self::VT_NUMBEROFSAMPLES, false)?
     .visit_field::<u16>("sampleRate", Self::VT_SAMPLERATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup>>>>("channelSetup", Self::VT_CHANNELSETUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioSamples>>>>("channels", Self::VT_CHANNELS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup>>>>("allChannels", Self::VT_ALLCHANNELS, false)?
     .visit_field::<bool>("wantEcho", Self::VT_WANTECHO, false)?
     .finish();
    Ok(())
  }
}
pub struct JammerNetzPNPAudioBlockArgs<'a> {
    pub timestamp: f64,
    pub messageCounter: u64,
    pub numChannels: u8,
    pub numberOfSamples: u16,
    pub sampleRate: u16,
    pub channelSetup: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup<'a>>>>>,
    pub channels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioSamples<'a>>>>>,
    pub allChannels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup<'a>>>>>,
    pub wantEcho: bool,
}
impl<'a> Default for JammerNetzPNPAudioBlockArgs<'a> {
  #[inline]
  fn default() -> Self {
    JammerNetzPNPAudioBlockArgs {
      timestamp: 0.0,
      messageCounter: 0,
      numChannels: 0,
      numberOfSamples: 0,
      sampleRate: 0,
      channelSetup: None,
      channels: None,
      allChannels: None,
      wantEcho: true,
    }
  }
}

pub struct JammerNetzPNPAudioBlockBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JammerNetzPNPAudioBlockBuilder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: f64) {
    self.fbb_.push_slot::<f64>(JammerNetzPNPAudioBlock::VT_TIMESTAMP, timestamp, 0.0);
  }
  #[inline]
  pub fn add_messageCounter(&mut self, messageCounter: u64) {
    self.fbb_.push_slot::<u64>(JammerNetzPNPAudioBlock::VT_MESSAGECOUNTER, messageCounter, 0);
  }
  #[inline]
  pub fn add_numChannels(&mut self, numChannels: u8) {
    self.fbb_.push_slot::<u8>(JammerNetzPNPAudioBlock::VT_NUMCHANNELS, numChannels, 0);
  }
  #[inline]
  pub fn add_numberOfSamples(&mut self, numberOfSamples: u16) {
    self.fbb_.push_slot::<u16>(JammerNetzPNPAudioBlock::VT_NUMBEROFSAMPLES, numberOfSamples, 0);
  }
  #[inline]
  pub fn add_sampleRate(&mut self, sampleRate: u16) {
    self.fbb_.push_slot::<u16>(JammerNetzPNPAudioBlock::VT_SAMPLERATE, sampleRate, 0);
  }
  #[inline]
  pub fn add_channelSetup(&mut self, channelSetup: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPAudioBlock::VT_CHANNELSETUP, channelSetup);
  }
  #[inline]
  pub fn add_channels(&mut self, channels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JammerNetzPNPAudioSamples<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPAudioBlock::VT_CHANNELS, channels);
  }
  #[inline]
  pub fn add_allChannels(&mut self, allChannels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JammerNetzPNPChannelSetup<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPAudioBlock::VT_ALLCHANNELS, allChannels);
  }
  #[inline]
  pub fn add_wantEcho(&mut self, wantEcho: bool) {
    self.fbb_.push_slot::<bool>(JammerNetzPNPAudioBlock::VT_WANTECHO, wantEcho, true);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JammerNetzPNPAudioBlockBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JammerNetzPNPAudioBlockBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JammerNetzPNPAudioBlock<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JammerNetzPNPAudioBlock<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JammerNetzPNPAudioBlock");
      ds.field("timestamp", &self.timestamp());
      ds.field("messageCounter", &self.messageCounter());
      ds.field("numChannels", &self.numChannels());
      ds.field("numberOfSamples", &self.numberOfSamples());
      ds.field("sampleRate", &self.sampleRate());
      ds.field("channelSetup", &self.channelSetup());
      ds.field("channels", &self.channels());
      ds.field("allChannels", &self.allChannels());
      ds.field("wantEcho", &self.wantEcho());
      ds.finish()
  }
}
pub enum JammerNetzPNPAudioDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JammerNetzPNPAudioData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JammerNetzPNPAudioData<'a> {
  type Inner = JammerNetzPNPAudioData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JammerNetzPNPAudioData<'a> {
  pub const VT_AUDIOBLOCKS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JammerNetzPNPAudioData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JammerNetzPNPAudioDataArgs<'args>
  ) -> flatbuffers::WIPOffset<JammerNetzPNPAudioData<'bldr>> {
    let mut builder = JammerNetzPNPAudioDataBuilder::new(_fbb);
    if let Some(x) = args.audioBlocks { builder.add_audioBlocks(x); }
    builder.finish()
  }


  #[inline]
  pub fn audioBlocks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioBlock<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioBlock>>>>(JammerNetzPNPAudioData::VT_AUDIOBLOCKS, None)}
  }
}

impl flatbuffers::Verifiable for JammerNetzPNPAudioData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioBlock>>>>("audioBlocks", Self::VT_AUDIOBLOCKS, false)?
     .finish();
    Ok(())
  }
}
pub struct JammerNetzPNPAudioDataArgs<'a> {
    pub audioBlocks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JammerNetzPNPAudioBlock<'a>>>>>,
}
impl<'a> Default for JammerNetzPNPAudioDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    JammerNetzPNPAudioDataArgs {
      audioBlocks: None,
    }
  }
}

pub struct JammerNetzPNPAudioDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JammerNetzPNPAudioDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_audioBlocks(&mut self, audioBlocks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JammerNetzPNPAudioBlock<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JammerNetzPNPAudioData::VT_AUDIOBLOCKS, audioBlocks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JammerNetzPNPAudioDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JammerNetzPNPAudioDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JammerNetzPNPAudioData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JammerNetzPNPAudioData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JammerNetzPNPAudioData");
      ds.field("audioBlocks", &self.audioBlocks());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `JammerNetzPNPAudioData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_jammer_netz_pnpaudio_data_unchecked`.
pub fn root_as_jammer_netz_pnpaudio_data(buf: &[u8]) -> Result<JammerNetzPNPAudioData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<JammerNetzPNPAudioData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `JammerNetzPNPAudioData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_jammer_netz_pnpaudio_data_unchecked`.
pub fn size_prefixed_root_as_jammer_netz_pnpaudio_data(buf: &[u8]) -> Result<JammerNetzPNPAudioData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<JammerNetzPNPAudioData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `JammerNetzPNPAudioData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_jammer_netz_pnpaudio_data_unchecked`.
pub fn root_as_jammer_netz_pnpaudio_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<JammerNetzPNPAudioData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<JammerNetzPNPAudioData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `JammerNetzPNPAudioData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_jammer_netz_pnpaudio_data_unchecked`.
pub fn size_prefixed_root_as_jammer_netz_pnpaudio_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<JammerNetzPNPAudioData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<JammerNetzPNPAudioData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a JammerNetzPNPAudioData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `JammerNetzPNPAudioData`.
pub unsafe fn root_as_jammer_netz_pnpaudio_data_unchecked(buf: &[u8]) -> JammerNetzPNPAudioData {
  flatbuffers::root_unchecked::<JammerNetzPNPAudioData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed JammerNetzPNPAudioData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `JammerNetzPNPAudioData`.
pub unsafe fn size_prefixed_root_as_jammer_netz_pnpaudio_data_unchecked(buf: &[u8]) -> JammerNetzPNPAudioData {
  flatbuffers::size_prefixed_root_unchecked::<JammerNetzPNPAudioData>(buf)
}
#[inline]
pub fn finish_jammer_netz_pnpaudio_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<JammerNetzPNPAudioData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_jammer_netz_pnpaudio_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<JammerNetzPNPAudioData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
